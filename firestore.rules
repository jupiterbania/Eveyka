/**
 * @file Firebase Security Rules for FocusFinds application.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user data,
 *   allows public read access to images, and restricts write access to images and analytics
 *   to authorized users.
 *
 * @dataStructure The data is organized as follows:
 *   - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 *   - /images/{imageId}: Stores image metadata, publicly readable but writable only by authorized users.
 *   - /users/{userId}/purchases/{purchaseId}: Stores purchase history for individual users, accessible only to the user themselves.
 *   - /images/{imageId}/purchases/{purchaseId}: Stores purchase data for images, for admin analytics.
 *   - /roles_admin/{userId}: Presence of a document indicates admin role for the user.
 *   - /analytics/sales: Stores aggregated sales analytics.
 *   - /settings/main: Stores site settings.
 *
 * @keySecurityDecisions
 *   - Users can only access their own data under /users/{userId} and its subcollections.
 *   - Image metadata is publicly readable, but updates are restricted.
 *   - Only authorized users can modify image sales data.
 *   - Admin privileges are granted based on the existence of a document in /roles_admin/{userId}.
 *   - The rules do not enforce the complete schema of the data, focusing on authorization and relational integrity.
 *   - Incremental updates to the `sales` field are allowed only for authorized users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data.
     * @path /users/{userId}
     * @allow (read, write) if the request is made by the user with matching userId. (create) if request.auth.uid == userId
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (read, write) if the request is made by the user with matching userId.
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for purchases.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to image metadata, but restricts writes.
     * @path /images/{imageId}
     * @allow (read) to anyone.
     * @allow (create) to authorized users.
     * @allow (update, delete) to authorized users.
     * @deny (create, update, delete) to unauthorized users.
     * @principle Provides public image listings while securing modifications.
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores purchase data for images, for admin analytics.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (read, write) if the request is made by the admin.
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for purchases.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document.
     * @path /roles_admin/{userId}
     * @allow (read, write) to admins only.
     * @principle Existence of document confers admin rights.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to analytics data to administrators only.
     * @path /analytics/sales
     * @allow (read, write) to admins only.
     * @deny (read, write) to non-admins.
     * @principle Restricts access to sensitive analytics data.
     */
    match /analytics/sales {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

       /**
     * @description Restricts access to site settings data to administrators only.
     * @path /settings/main
     * @allow (read, write) to admins only.
     * @deny (read, write) to non-admins.
     * @principle Restricts access to sensitive settings data.
     */
    match /settings/main {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}