/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-owned data and admin override.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user and admins.
 * - /images/{imageId}: Publicly accessible image metadata.
 * - /users/{userId}/purchases/{purchaseId}: Purchase history for each user, accessible only to the user and admins.
 * - /images/{imageId}/purchases/{purchaseId}: Anonymous purchase data for an image, for admin analytics.
 * - /roles_admin/{userId}: Documents indicating administrator roles. Existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Public read access to images is allowed.
 * - Admin privileges are granted by the existence of a document in the `/roles_admin/{userId}` collection, based on the auth.uid.
 *
 * Denormalization for Authorization:
 * - User documents in `/users/{userId}` are assumed to contain an `id` field that matches the `userId` path parameter. This is enforced on creation and immutability is enforced on update to simplify rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks for admin role in roles_admin collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Combines ownership check with existence check.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Protects update/delete operations on existing documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile: request.auth.uid == 'user123'
     * @allow (get) User with UID 'user123' reads their profile: request.auth.uid == 'user123'
     * @allow (update) Admin updates any user profile.
     * @deny (create) User with UID 'user123' tries to create profile for 'user456': request.auth.uid != 'user456'
     * @deny (update) User with UID 'user123' tries to update profile for 'user456' without admin privileges: request.auth.uid != 'user456' and !isAdmin()
     * @principle Enforces document ownership for writes and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if (isExistingOwner(userId) && request.resource.data.id == resource.data.id) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Defines rules for images.
     * @path /images/{imageId}
     * @allow (get) Any user can read image data.
     * @allow (list) Any user can list images.
     * @deny (create) Only authenticated users can create new images.
     * @principle Allows public read access and requires authentication for writes.
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Defines rules for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User with UID 'user123' creates a purchase record under their ID: request.auth.uid == 'user123'
     * @allow (get) User with UID 'user123' reads their purchase record: request.auth.uid == 'user123'
     * @allow (update) Admin updates any purchase record.
     * @deny (create) User with UID 'user123' tries to create purchase record for 'user456': request.auth.uid != 'user456'
     * @deny (update) User with UID 'user123' tries to update purchase record for 'user456' without admin privileges: request.auth.uid != 'user456' and !isAdmin()
     * @principle Enforces user-ownership for writes and admin override.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if (isExistingOwner(userId) && request.resource.data.userId == resource.data.userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Defines rules for image-specific purchase history (admin analytics).
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get) Only admins can read image purchase data.
     * @allow (list) Only admins can list image purchases.
     * @deny (create) Non-admins cannot create new image purchase records.
     * @principle Restricts access to admin users.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only the user themselves can claim admin.
     * @allow (get) Any signed-in user can check the existence of an admin role.
     * @deny (create) User with UID 'user123' tries to create admin role for 'user456': request.auth.uid != 'user456'
     * @deny (update) No updates allowed.
     * @principle Role-based access control, existence determines admin privilege.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}