/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open read access for some content with strict ownership and admin-based control for sensitive data.
 * Public image data is readable by anyone, while user profiles and purchase histories are protected by user-based access control.
 * Administrative privileges are granted based on the existence of documents in the `/roles_admin` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only to the user and admins.
 * - /images/{imageId}: Stores image metadata. Publicly readable, but writes are not permitted in this prototyping phase.
 * - /users/{userId}/purchases/{purchaseId}: Stores purchase history for each user. Accessible only to the user.
 * - /images/{imageId}/purchases/{purchaseId}: Stores anonymous purchase data for an image. Accessible to anyone.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges to the user.
 * - /analytics/sales: Stores aggregated sales data. Only accessible to admins.
 * - /settings/main: Stores site-wide settings. Only accessible to admins.
 *
 * Key Security Decisions:
 * - Public Read Access for Images: The `/images` collection is publicly readable (`allow get, list: if true;`) to facilitate browsing the image catalog.
 * - Strict Ownership for User Data: The `/users/{userId}` collection and its subcollections are strictly controlled by user ownership (`isOwner(userId)`).
 * - Admin Role via Document Existence: Administrative privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection.
 * - Denormalization for Authorization: The `Purchase` documents stored under `/images/{imageId}` include the `userId` to allow security rules to enforce access control based on user ID even in this anonymous context.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Requires user to be authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the userId.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Enforces document ownership for data access.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document based on the userId.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Enforces document ownership and existence for data modification.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

        /**
     * @description Checks if the user is an admin based on the existence of a document in /roles_admin/{userId}.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Uses document existence to grant admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Manages user profile data, accessible only to the user and administrators.
     * @path /users/{userId}
     * @allow (get, update, delete) User with ID 'user123' can read/write their own profile data.
     * @allow (create) User with ID 'user123' can create their own profile data.
     * @deny (get, update, delete) User with ID 'user456' cannot access user 'user123' profile data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Manages image metadata, publicly readable. Writes are not allowed in this prototyping phase.
     * @path /images/{imageId}
     * @allow (get, list) Any user can read image metadata.
     * @deny (create, update, delete) No user can create, update, or delete image metadata in this phase.
     * @principle Provides public read access for image browsing.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get, create, update, delete) User with ID 'user123' can manage their own purchase history.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access user 'user123' purchase history.
     * @principle Enforces user-specific data ownership.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages anonymous purchase data for an image, for admin analytics.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (create) any signed in user can create a purchase
     * @allow (get) any signed in user can get a purchase
     * @principle Allows public access to purchase data
     */
    match /images/{imageId}/purchases/{purchaseId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }

     /**
      * @description Grants admin privileges based on the existence of a document.
      * @path /roles_admin/{userId}
      * @allow (create) Admins can grant admin roles by creating documents.
      * @deny (create) Non-admins cannot grant themselves admin roles.
      * @principle Uses document existence to grant admin privileges.
      */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Manages aggregated sales data. Only accessible to admins.
     * @path /analytics/sales
     * @allow (get, update) Admins can read and update sales analytics.
     * @deny (get, update) Non-admins cannot access or modify sales analytics.
     * @principle Restricts access to sensitive analytics data to administrators.
     */
    match /analytics/sales {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }

     /**
      * @description Manages site-wide settings. Only accessible to admins.
      * @path /settings/main
      * @allow (get, update) Admins can read and update site settings.
      * @deny (get, update) Non-admins cannot access or modify site settings.
      * @principle Restricts access to sensitive site settings to administrators.
      */
     match /settings/main {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}