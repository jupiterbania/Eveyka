/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public read access for images with strict ownership and administrative controls for user data and purchases.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user and admins.
 * - /images/{imageId}: Publicly readable image metadata.
 * - /users/{userId}/purchases/{purchaseId}: User-specific purchase history, accessible only to the user.
 * - /images/{imageId}/purchases/{purchaseId}: Image-specific purchase data for admin analytics.
 * - /roles_admin/{userId}: Indicates admin privileges. Document existence grants admin status.
 *
 * Key Security Decisions:
 * - Public Image Listing: The /images collection is publicly readable to facilitate discovery.
 * - User Data Isolation: User profiles and purchase history are strictly controlled via ownership.
 * - Admin Roles: Administrative privileges are granted based on the existence of a document in the /roles_admin collection.
 *
 * Denormalization for Authorization:
 *  - The data is denormalized such that ownership can be validated locally on documents.
 *  - For Users, the userId is part of the document path itself (`/users/{userId}`), so the `id` attribute of the User document is validated against the path's `userId` parameter during creation. The `id` field is immutable on updates to prevent privilege escalation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the resource data.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @return {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /***************** Users Collection *****************/

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their profile.
     * @allow (get, update, delete) User can access/modify their own profile. Admins can access any profile.
     * @deny (create) User cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for writes; allows admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /***************** Images Collection *****************/

    /**
     * @description Manages images available for purchase.
     * @path /images/{imageId}
     * @allow (get, list) Any user can read image metadata.
     * @principle Public read access with owner-only writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin(); // Only admins can create images
      allow update: if isAdmin(); // Only admins can update images
      allow delete: if isAdmin(); // Only admins can delete images
    }

    /***************** User Purchases Collection *****************/

    /**
     * @description Manages purchase history for each user.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User with matching userId can create a purchase record.
     * @allow (get, update, delete) User can access/modify their own purchase records.
     * @deny (create) User cannot create a purchase record with a mismatched userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /***************** Image Purchases Collection (Admin Analytics) *****************/

    /**
     * @description Stores anonymous purchase data for an image, for admin analytics.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (read, write) Only admins can read/write purchase records under an image.
     * @principle Restricts access to admins only.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /***************** Admin Roles Collection *****************/

    /**
     * @description Manages administrator roles. Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) Only Firebase Functions can add new admin user (using Admin SDK and bypassing security rules).
     * @allow (get) Admins can check the existence of other admins.
     * @deny (create, update, delete) No client-side creation, update, or deletion of admin roles.
     * @principle DBAC - Existence over Content.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
  }
}