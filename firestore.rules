/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public read access for some data (images) with strict user-ownership and admin-only access for sensitive data (user profiles, purchases, analytics, site settings). It prioritizes secure data access and prevents unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user and admins.
 * - /images/{imageId}: Stores image metadata. Publicly readable, but write access is restricted.
 * - /users/{userId}/purchases/{purchaseId}: Stores a user's purchase history, accessible only to the user and admins.
 * - /images/{imageId}/purchases/{purchaseId}: Stores purchase data, used for sales analytics, accessible only to admins.
 * - /roles_admin/{userId}: Documents in this collection indicate admin status for a user. The *existence* of a document confers admin rights.
 * - /analytics/sales: Stores aggregated sales data, accessible only to admins.
 * - /settings/main: Stores global site settings, accessible only to admins.
 *
 * Key Security Decisions:
 * - Public Read Access for Images: The /images/{imageId} collection is publicly readable to allow browsing without authentication. Write access is not defined in the rules.
 * - Strict User Ownership: User profiles and purchases are strictly controlled by user ownership.
 * - Admin-Only Access: Analytics and site settings are restricted to administrators.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * - The rules rely on `request.auth.uid` for identity verification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if a user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is an existing owner.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user is an existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (get) Signed-in user can read their own profile.
     * @allow (create) Signed-in user can create their own profile.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @deny (get) Signed-in user cannot read other user profiles.
     * @deny (create) Signed-in user cannot create other user profiles with a mismatched id.
     * @deny (update) Signed-in user cannot modify the user id.
     * @principle Enforces document ownership for writes and restricts read access to the owner and admins.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Allows public read access to image metadata.
     * @path /images/{imageId}
     * @allow (get) Anyone can read image metadata.
     * @allow (list) Anyone can list image metadata.
     * @deny (create) No one can create image metadata. // TODO: Add more specific create rule if needed.
     * @deny (update) No one can update image metadata. // TODO: Add more specific update rule if needed.
     * @deny (delete) No one can delete image metadata. // TODO: Add more specific delete rule if needed.
     * @principle Provides public read access while restricting write access.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Protects user purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get) Signed-in user can read their own purchase history.
     * @allow (list) Signed-in user can list their own purchase history.
     * @allow (create) Signed-in user can create purchase entry in their history.
     * @allow (update) Signed-in user can update purchase entry in their history.
     * @allow (delete) Signed-in user can delete purchase entry in their history.
     * @deny (get) Signed-in user cannot read other user purchase history.
     * @deny (create) Signed-in user cannot create other user purchases with a mismatched user id.
     * @deny (update) Signed-in user cannot modify the user id in the purchase entry.
     * @principle Enforces document ownership for writes and restricts read access to the owner and admins.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

      /**
       * @description Protects admin analytics purchase data.
       * @path /images/{imageId}/purchases/{purchaseId}
       * @allow (get) Admins can read purchase data.
       * @allow (list) Admins can list purchase data.
       * @allow (create) Admins can create purchase data.
       * @allow (update) Admins can update purchase data.
       * @allow (delete) Admins can delete purchase data.
       * @deny (get) Non-admins cannot read purchase data.
       * @deny (list) Non-admins cannot list purchase data.
       * @principle Restricts read and write access to admins only.
       */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines admin roles via document existence.
     * @path /roles_admin/{userId}
     * @allow (get) Admins can check for admin status.
     * @allow (create) Admins can grant admin status.
     * @allow (update) Admins can modify admin status.
     * @allow (delete) Admins can revoke admin status.
     * @deny (get) Non-admins cannot check admin status.
     * @deny (create) Non-admins cannot grant admin status.
     * @principle Role-Based Access Control. The existence of a document grants admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to aggregated sales analytics.
     * @path /analytics/sales
     * @allow (get) Admins can read sales analytics.
     * @allow (list) Admins can list sales analytics.
     * @allow (create) Admins can create sales analytics.
     * @allow (update) Admins can update sales analytics.
     * @allow (delete) Admins can delete sales analytics.
     * @deny (get) Non-admins cannot read sales analytics.
     * @deny (list) Non-admins cannot list sales analytics.
     * @principle Restricts read and write access to admins only.
     */
    match /analytics/sales {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

      /**
       * @description Restricts access to global site settings.
       * @path /settings/main
       * @allow (get) Admins can read site settings.
       * @allow (list) Admins can list site settings.
       * @allow (create) Admins can create site settings.
       * @allow (update) Admins can update site settings.
       * @allow (delete) Admins can delete site settings.
       * @deny (get) Non-admins cannot read site settings.
       * @deny (list) Non-admins cannot list site settings.
       * @principle Restricts read and write access to admins only.
       */
    match /settings/main {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
  }
}