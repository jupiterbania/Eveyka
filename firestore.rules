/**
 * @file Firebase Security Rules for FocusFinds Application
 *
 * @description This ruleset enforces a user-ownership model for user profiles and purchases,
 * with public read access to images. Administrative privileges are granted based on the
 * existence of a document in the `/roles_admin/{userId}` collection.  Rules are structured to be
 * as secure as possible, with all write operations requiring authentication and authorization.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profile information, accessible only to the user and admins.
 * - `/images/{imageId}`: Stores image metadata, publicly readable.
 * - `/users/{userId}/purchases/{purchaseId}`: Stores purchase history for each user, accessible only to the user and admins.
 * - `/images/{imageId}/purchases/{purchaseId}`: Stores purchase history for each image, writeable only by admins.
 * - `/roles_admin/{userId}`: Presence of a document grants admin privileges.
 * - `/settings/main`: Singleton document with site-wide settings, publicly readable, admin-writeable.
 *
 * @keySecurityDecisions
 * - Users can only access their own profile data and purchase history.
 * - Images are publicly readable, but creation, updating, and deletion are restricted to admins.
 * - Listing of the entire database root is denied.
 * - Administrative privileges are determined by the existence of a document in `/roles_admin/{userId}`.
 *
 * @denormalizationForAuthorization
 * - Admin status is determined by the existence of a document at `/roles_admin/{userId}`. This avoids having to read the user document itself.
 *
 * @structuralSegregation
 * - The separation of user-owned purchases (under `/users/{userId}`) and image-owned purchases (under `/images/{imageId}`) allows for different access control policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document (userId matches request.auth.uid).
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an administrator by verifying the existence of a document in /roles_admin/{userId}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Denies listing of the entire database.
     * @path /databases/{database}/documents
     * @allow N/A
     * @deny (list) - Attempting to list the entire database.
     * @principle Prevents unauthorized data discovery.
     */
    match /{document=**} {
       allow list: if false;
    }

   /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User creates their own profile with matching userId.
     * @allow (get, update, delete) - User accesses their own profile.
     * @deny (create) - User attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) - User attempts to access another user's profile.
     * @principle Enforces document ownership and prevents unauthorized profile access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /images/{imageId} collection.
     * @path /images/{imageId}
     * @allow (get, list) - Anyone can read image metadata.
     * @allow (create, update, delete) - Only admins can create, update, or delete images.
     * @deny (create, update, delete) - Non-admins attempt to modify image data.
     * @principle Allows public read access to images while restricting write access to admins.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/purchases/{purchaseId} collection.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create, get, list) - User can create, get, and list their own purchases.
     * @allow (update, delete) - Only admins can update or delete a purchase.
     * @deny (create, get, list) - User attempts to access another user's purchase history.
     * @deny (update, delete) - Non-admins attempt to modify purchase data.
     * @principle Enforces user-ownership for purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get, list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /images/{imageId}/purchases/{purchaseId} collection.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (create, get, list, update, delete) - Only admins can manage image purchase analytics.
     * @deny (create, get, list, update, delete) - Non-admins attempt to modify purchase data.
     * @principle Restricts access to image purchase analytics to admins.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (create) - Only a new admin can create their role document.
     * @allow (get, update, delete) - Only the admin themselves can modify or delete their role document.
     * @principle Enforces that only admins can grant or revoke their own admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && request.auth.uid == userId;
      allow update: if false;
      allow delete: if isAdmin() && request.auth.uid == userId && resource != null;
    }

    /**
     * @description Rules for the /settings/main singleton document.
     * @path /settings/main
     * @allow (get) - Anyone can read the site settings.
     * @allow (update) - Only admins can update the site settings.
     * @deny (create, delete) - Creation and deletion are disallowed to maintain the singleton pattern.
     * @principle Restricts site settings modifications to admins.
     */
    match /settings/main {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}