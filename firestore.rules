/**
 * @file Firebase Security Rules for FocusFinds
 * @description This ruleset enforces a user-ownership model for user profiles and purchases,
 *              restricts write access to analytics data to admins only, and allows public read access to images.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /images/{imageId}: Stores image metadata.
 * - /users/{userId}/purchases/{purchaseId}: Stores purchase history for each user.
 * - /images/{imageId}/purchases/{purchaseId}: Stores purchase history for each image (admin analytics).
 * - /roles_admin/{userId}: Stores admin roles (DBAC - Existence over Content).
 * - /analytics/sales: Stores aggregated sales and revenue data (single document).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create purchases under their own user ID.
 * - Image data is publicly readable, but writes are not secured (TODO).
 * - Only admins can write to the /analytics/sales document.
 * - User listing is generally disallowed.
 *
 * Denormalization for Authorization:
 * - The Purchase documents MUST contain the `userId` to simply authorization checks.
 *
 * Structural Segregation:
 * - User profile data is stored under a user-specific path (/users/{userId}) for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (read, write) User with UID 'userId' can access their own profile.
     * @deny (read, write) User with UID 'otherUserId' cannot access user 'userId' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows public read access to image data. Write access needs to be secured (TODO).
     * @path /images/{imageId}
     * @allow (get, list) Any user can read image data.
     * @deny (create, update, delete)  Writes are not currently secured, but should be restricted to authorized users (TODO).
     * @principle Allows public read access to images; write permissions are not yet implemented.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows users to manage their own purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User with UID 'userId' can create purchases for themselves.
     * @allow (read, write) User with UID 'userId' can access their own purchase history.
     * @deny (read, write) User with UID 'otherUserId' cannot access user 'userId' purchase history.
     * @principle Enforces document ownership for purchases.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Stores purchase history under the image document for analytical purposes.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (create)  Any authenticated user can create.
     * @deny (read, write, update, delete) No read, write, update, or delete
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows admins to read and write admin role documents. Existence of a document grants admin privileges.
      * @path /roles_admin/{userId}
      */
    match /roles_admin/{userId} {
        function isAdmin() {
          return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.id == request.auth.uid;
        }

        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Restricts write access to the analytics document to admins only.
     * @path /analytics/sales
     * @allow (read) Any user can read the analytics data.
     * @deny (write) Only admins can write to the analytics data.
     * @principle Restricts write access to sensitive data to authorized personnel.
     */
    match /analytics/sales {
          function isAdmin() {
          return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.id == request.auth.uid;
        }
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}