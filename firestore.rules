/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and purchases,
 * while allowing public read access to images. Administrative privileges are granted
 * based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile information, accessible only to the user and admins.
 * - `/images/{imageId}`: Image metadata, publicly readable, but only modifiable by admins (TODO).
 * - `/users/{userId}/purchases/{purchaseId}`: Purchase history for each user, only accessible to the user and admins.
 * - `/images/{imageId}/purchases/{purchaseId}`: Purchase history for each image, only accessible to admins.
 * - `/roles_admin/{userId}`:  If a document exists for a user ID in this collection, they are granted admin privileges.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profile data.
 * - Images are publicly readable, but write access is restricted (TODO).
 * - Purchase records are user-specific and only accessible to the user and admins.
 * - Listing of user documents is disallowed for privacy.
 * - Admin privileges are granted by the existence of a document in `/roles_admin/{userId}`.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in `/roles_admin/{userId}`. This avoids needing to store an `isAdmin` field on the user document itself.
 * - Ownership of purchases is determined by the `userId` path segment. This avoids needing to store a redundant `userId` field within the purchase document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the userId.
     * @param {string} userId The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document, verifying both ownership and document existence.
     * @param {string} userId The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile. request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads their profile. request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their profile. request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' attempts to create a profile for user 'user123'. request.auth.uid == 'user456'
     * @deny (get) User with ID 'user456' attempts to read profile of user 'user123'. request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Disallow listing of user documents for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for image metadata.
     * @path /images/{imageId}
     * @allow (get) Any user can read image metadata.
     * @deny (create) Non-admin attempts to create an image. request.auth.uid == 'user123' (not an admin)
     * @principle Public read access with owner-only (admin) writes (TODO).
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User with ID 'user123' creates a purchase record. request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads their purchase record. request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their purchase record. request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' attempts to create a purchase record for user 'user123'. request.auth.uid == 'user456'
     * @deny (get) User with ID 'user456' attempts to read purchase record of user 'user123'. request.auth.uid == 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for anonymous purchase data for an image (admin analytics).
     * @path /images/{imageId}/purchases/{purchaseId}
     * @deny (get) Non-admin attempts to read purchase data. request.auth.uid == 'user123' (not an admin)
     * @principle Admin-only access.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for administrator roles. Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) Admin user with ID 'admin123' can be created only by Firebase functions.
     * @deny (get) Non-admin attempts to access admin role document. request.auth.uid == 'user123' (not an admin)
     * @principle DBAC - Existence over Content.
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin() && resource != null;
    }
  }
}