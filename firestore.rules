/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and purchases,
 * public read access for images, and role-based access control for administrative functions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user and administrators.
 * - /images/{imageId}: Stores image metadata, publicly readable.
 * - /users/{userId}/purchases/{purchaseId}: Stores user-specific purchase history, accessible only to the user and administrators.
 * - /images/{imageId}/purchases/{purchaseId}: Stores purchase data, accessible only to administrators.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges.
 * - /analytics/sales: A singleton document for aggregated sales and revenue data.
 * - /settings/main: A singleton document for site settings like the hero image.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and purchase history.
 * - Image metadata is publicly readable, but write access is restricted to administrators (not implemented in this ruleset).
 * - Administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 * - Listing of users is disallowed.
 * - Analytics data is restricted to administrators.
 *
 * Denormalization for Authorization:
 * - The `Purchase` documents contain both `userId` and `imageId`, but these are only used for relationship integrity and not for authorization.
 *   Authorization is based on the document's location under `/users/{userId}` or `/images/{imageId}`.
 *
 * Structural Segregation:
 * - User-specific data (profiles and purchases) is stored under the `/users/{userId}` path, ensuring private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *     request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get, update, delete) User with ID 'user123' can access and modify their profile.
     *     request.auth.uid == 'user123' and resource.data.id == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *     request.auth.uid == 'user456' and request.resource.data.id == 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot access or modify 'user123's profile.
     *     request.auth.uid == 'user456' and resource.data.id == 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isNewOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Controls access to image metadata. Images are publicly readable.
     * @path /images/{imageId}
     * @allow (get, list) Any user can read image metadata.
     * @deny (create, update, delete) Only admins should manage images (not implemented in this ruleset).
     * @principle Allows public read access to image metadata.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User with ID 'user123' can create a purchase record.
     *     request.auth.uid == 'user123'
     * @allow (get, update, delete) User with ID 'user123' can access and modify their purchase record.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a purchase record for 'user123'.
     *     request.auth.uid == 'user456'
     * @deny (get, update, delete) User with ID 'user456' cannot access or modify 'user123's purchase record.
     *     request.auth.uid == 'user456'
     * @principle Enforces document ownership and restricts access to a user's own purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Controls access to purchase data for an image.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) Only admins can manage image purchases.
     * @deny (get, list, create, update, delete) Non-admins cannot access or modify image purchases.
     * @principle Restricts access to image purchase data to administrators.
     */
    match /images/{imageId}/purchases/{purchaseId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document.
     * @path /roles_admin/{userId}
     * @allow (get) Any user can check if they are an admin.
     * @allow (create) Only a privileged process can create admin roles.
     * @deny (update, delete) Admin role documents should not be modified or deleted directly.
     * @principle Existence of a document grants admin privileges.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin(); // In production: secure how these documents are created
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Controls access to aggregated analytics data.
     * @path /analytics/sales
     * @allow (get) Only admins can view analytics.
     * @deny (create, update, delete) Only a privileged process can write analytics.
     * @principle Restricts access to analytics data to administrators.
     */
    match /analytics/sales {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false; // In production: secure how these documents are created
        allow update: if isAdmin();
        allow delete: if false;
    }

    /**
     * @description Controls access to global site settings.
     * @path /settings/main
     * @allow (get, list) All users can read site settings.
     * @allow (update) Only admins can modify site settings.
     * @deny (create, delete) Site settings should not be created or deleted directly.
     * @principle Allows public read access and restricts write access to administrators.
     */
    match /settings/main {
      allow get, list: if true;
      allow create: if false; // Prevent accidental creation of a second settings doc
      allow update: if isAdmin();
      allow delete: if false; // Should never be deleted
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isNewOwner(userId) {
        return isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}