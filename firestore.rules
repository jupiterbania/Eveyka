/**
 * @file Firebase Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model with administrative overrides.
 * Users have full access to their own data trees, while administrators, identified by documents in the `/roles_admin` collection, have elevated privileges.
 * Data validation is relaxed to facilitate rapid prototyping, focusing primarily on authorization and relational integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user and admins.
 * - /images/{imageId}: Stores image metadata, publicly readable but writable only by admins (TODO).
 * - /users/{userId}/purchases/{purchaseId}: Stores purchase history for each user, accessible only to the user and admins.
 * - /images/{imageId}/purchases/{purchaseId}: Stores purchase data for each image, for analytics. Accessible only to admins.
 * - /roles_admin/{userId}: Indicates admin privileges. Existence of a document grants admin access.
 * - /analytics/sales: Stores aggregated sales and revenue data. Writable by admins only.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Data validation is minimized for rapid prototyping, focusing only on authorization-critical fields.
 * - The `roles_admin` collection uses a DBAC (Database-Controlled Access Control) approach: the mere existence of a document grants admin privileges.
 * - Public read access is granted to `/images/{imageId}`. Writes are restricted to admins.
 *
 * Denormalization for Authorization:
 * -  The rules rely on the `request.auth` object to determine the current user's UID and whether they are authenticated.
 *
 * Structural Segregation:
 * -  Purchase data is separated into user-specific subcollections (`/users/{userId}/purchases/{purchaseId}`) and image-specific subcollections (`/images/{imageId}/purchases/{purchaseId}`).
 *    The former is user-accessible, while the latter is admin-only and used for analytics.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     *     request.auth.uid = 'user123', request.resource.data.id = 'user123'
     * @allow (get) User with UID 'user123' can get their own profile.
     *     request.auth.uid = 'user123'
     * @allow (update) User with UID 'user123' can update their own profile.
     *     request.auth.uid = 'user123'
     * @deny (create) User with UID 'user123' cannot create a profile for 'user456'.
     *     request.auth.uid = 'user123', request.resource.data.id = 'user456'
     * @principle Enforces document ownership for writes, admins have full access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not permitted for privacy reasons.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /images/{imageId} collection.
     * @path /images/{imageId}
     * @allow (get, list) Any user can read image metadata.
     * @deny (create, update, delete) Only admins can modify image metadata.
     * @principle Allows public read access with admin-only writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin(); // TODO: Add validation for image data and required fields.
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/purchases/{purchaseId} collection.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create, get, update, delete) The owner of the user ID can manage their own purchase history. Admins also have full access.
     * @deny (create, update, delete) A non-owner user cannot manage another user's purchase history.
     * @principle Enforces document ownership, admins have full access.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && request.resource.data.userId == userId || isAdmin();
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /images/{imageId}/purchases/{purchaseId} collection.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (create, get, update, delete) Only admins can manage purchase data for analytics.
     * @deny (create, get, update, delete) Non-admins cannot access or modify purchase data for images.
     * @principle Restricts access to admins for analytics purposes.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin() && request.resource.data.userId == request.auth.uid; //Validate the authenticated user creates the purchase.
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (create) Any authenticated user can create their own admin role document. This should be restricted in production.
     * @allow (get, update, delete) Only admins can manage admin roles.
     * @deny (create, get, update, delete) Non-admins cannot manage admin roles.
     * @principle Uses document existence as an indicator of admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false; // Restrict admin role creation. Should be done via backend functions.
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /analytics/sales document.
     * @path /analytics/sales
     * @allow (get) Any user can read the analytics data.
     * @allow (create, update, delete) Only admins can modify the analytics data.
     * @principle Restricts write access to admins for sensitive analytics data.
     */
    match /analytics/sales {
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}