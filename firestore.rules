/**
 * @file Firestore Security Rules for FocusFinds Application
 * @description This ruleset enforces a strict user-ownership model for user profiles and purchase history, 
 * with public read access to images. Administrative privileges are granted based on the existence of a document 
 * in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user and admins.
 * - /images/{imageId}: Image metadata, publicly readable, but only updatable/deletable by admins.
 * - /users/{userId}/purchases/{purchaseId}: Purchase history for each user, accessible only to the user and admins.
 * - /images/{imageId}/purchases/{purchaseId}: Purchase data, accessible only to admins.
 * - /roles_admin/{userId}: Admin role assignment. Existence of the document grants admin privileges.
 * - /analytics/sales: Aggregated sales data, accessible only to admins.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and purchase history.
 * - Image metadata is publicly readable to facilitate browsing and discovery.
 * - Administrative privileges are determined by the existence of a document in `/roles_admin/{userId}`.
 * - Direct listing of users is not permitted to prevent enumeration.
 * - Analytics data is restricted to administrators.
 *
 * Denormalization for Authorization:
 * - The `/roles_admin/{userId}` collection uses document existence to grant admin privileges.
 *   This avoids the need to read the document content, simplifying the rules.
 *
 * Structural Segregation:
 * - User-specific data (profiles and purchases) is stored in user-scoped subcollections to ensure privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (get, list): User 'user123' can read their own profile.
     * @allow (create, update, delete): User 'user123' can create, update, and delete their own profile.
     * @deny (get, list): User 'user456' cannot read user 'user123's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Grants public read access to image metadata, but restricts writes to administrators.
     * @path /images/{imageId}
     * @allow (get, list): Any user can browse the list of images.
     * @allow (create, update, delete): Only administrators can create, update or delete image records.
     * @deny (create, update, delete): Regular users cannot create, update, or delete image records.
     * @principle Allows public discovery of images while retaining administrative control over the data.
     */
    match /images/{imageId} {
        allow get, list: if true;

        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Grants access to a user's purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get, list): User 'user123' can read their own purchase history.
     * @allow (create, update, delete): User 'user123' can create, update, and delete their own purchase history.
     * @deny (get, list): User 'user456' cannot read user 'user123's purchase history.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Grants admin access to aggregated purchase data associated with an image.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete): Only admins can access this purchase data.
     * @deny (get, list, create, update, delete): Regular users cannot access or modify this data.
     * @principle Restricts access to sensitive analytics data to authorized personnel.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get, list): Not applicable (DBAC - existence check only).
     * @allow (create, update, delete): Only existing admins can modify the roles.
     * @deny (create): A non-admin user cannot grant themselves admin privileges.
     * @principle Defines admin roles through document existence, simplifying authorization checks.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Listing admins is generally not allowed

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants admin access to aggregated sales and revenue data.
     * @path /analytics/sales
     * @allow (get, create, update): Only admins can access and modify analytics data.
     * @deny (get, create, update): Regular users cannot access this data.
     * @principle Restricts access to sensitive analytics data to authorized personnel.
     */
    match /analytics/sales {
      allow get, create, update, delete: if isAdmin();
      allow list: if isAdmin();
    }

    function isSignedIn() {
        return request.auth != null;
    }

    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}