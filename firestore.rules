/**
 * @fileoverview Firestore Security Rules for FocusFinds Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, user-centric data model. Users own their
 * data and can only access their own profile information and purchase history.
 * Images are publicly readable but can only be created, updated, or deleted with proper auth.
 * The DBAC pattern is used on /roles_admin/{userId} for admin privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user and admins.
 * - /images/{imageId}: Stores image metadata, publicly readable, owner-only write access (if implemented).
 * - /users/{userId}/purchases/{purchaseId}: Stores user-specific purchase history, accessible only to the user.
 * - /images/{imageId}/purchases/{purchaseId}: Stores image-specific purchase data, accessible only to admins.
 * - /roles_admin/{userId}: Existence determines admin privileges.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information harvesting.
 * - Image reads are public, enabling open discovery, but writes are restricted.
 * - Admin privileges are managed through the existence of documents in the /roles_admin collection.
 *
 * Denormalization for Authorization:
 * - For simplicity and performance, critical authorization data (e.g., ownership) should be stored
 *   directly on the documents being secured. This avoids costly `get()` calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is the owner of the profile.
     * @allow (create) if the user's ID matches the document ID.
     * @deny (create) if the user's ID does not match the document ID.
     * @deny (list) to prevent user enumeration.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Grants public read access to image metadata and restricts write access to the owner.
     * @path /images/{imageId}
     * @allow (get, list) to allow public access to images.
     * @deny (create, update, delete) No owner field exists, writes are not allowed in prototyping
     * @principle Allows public read access but restricts write access.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) if the user is the owner.
     * @deny (get, list, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants admin access to image-specific purchase data.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) only for admins.
     * @deny (get, list, create, update, delete) for non-admins.
     * @principle Restricts access to sensitive analytics data to admins.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

     function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) only for admins.
     * @deny (get, create, update, delete) for non-admins.
     * @principle Implements DBAC for admin roles.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}