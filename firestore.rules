rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to user profile information only to the user and admins.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId, to allow self-creation
     * @allow (get, list) if isAdmin()
     * @deny (update, delete) if request.auth.uid != userId && !isAdmin()
     * @deny create if request.auth.uid != userId
     * @principle Enforces document ownership and restricts access to user-specific data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Allows public read access to image metadata, but only admins can create, update, or delete images.
     * @path /images/{imageId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Allows public read access while restricting write access to admins.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read and write access to user-specific purchase history only to the user and admins.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId || isAdmin()
     * @deny (get, list, create, update, delete) if request.auth.uid != userId && !isAdmin()
     * @principle Enforces document ownership and restricts access to user-specific data.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

     /**
      * @description Allows admins to create, read, update, and delete purchase records under an image.
      * @path /images/{imageId}/purchases/{purchaseId}
      * @allow create, update, delete: if isAdmin();
      * @allow get, list: if isAdmin();
      * @deny create, update, delete: if !isAdmin();
      * @principle Restricts write access to admins.
      */
    match /images/{imageId}/purchases/{purchaseId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow create, update, delete: if request.auth.uid == userId
     * @allow get: if true;
     * @allow list: if false;
     * @deny create, update, delete: if request.auth.uid != userId
     * @principle DBAC - Existence over Content. Grants admin rights if the document exists.
     */
    match /roles_admin/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows read and write access to the analytics data only to admins.
     * @path /analytics/sales
     * @allow (get, update) if isAdmin()
     * @deny (get, update) if !isAdmin()
     * @principle Restricts access to sensitive analytics data to admins only.
     */
    match /analytics/sales {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in the roles_admin collection.
     */
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}