/**
 * @file Firestore Security Rules for FocusFinds Application
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and purchases,
 * while allowing public read access to image metadata. Administrative privileges are granted based on
 * the existence of a document in the `/roles_admin/{userId}` collection. Analytics data is only accessible
 * to admins.
 * @data_structure
 * - `/users/{userId}`: Stores user profile information, accessible only to the user and admins.
 * - `/images/{imageId}`: Stores image metadata, publicly readable.
 * - `/users/{userId}/purchases/{purchaseId}`: Stores user-specific purchase history, accessible only to the user and admins.
 * - `/images/{imageId}/purchases/{purchaseId}`: Stores image-specific purchase history for admin analytics.
 * - `/roles_admin/{userId}`: Indicates admin privileges. Document existence grants admin role.
 * - `/analytics/sales`: Stores aggregated sales and revenue data, accessible only to admins.
 * @key_security_decisions
 * - Users can only access their own profile data and purchase history.
 * - Image metadata is publicly readable to facilitate browsing.
 * - Image purchase history is accessible under both user and image paths to allow for complex queries and aggregations.
 * - Administrative privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection.
 * - The rules do not allow listing all users.
 * @denormalization_for_authorization Not applicable in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *          Data must have 'id' field set to 'user123'.
     *          `request.auth.uid` must also be 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can access and modify their profile.
     *          `request.auth.uid` must be 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot access user 'user123' profile.
     *          `request.auth.uid` is 'user456', but path is /users/user123.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Allows public read access to image metadata.
     * @path /images/{imageId}
     * @allow (get, list) Any user, signed in or not, can read image metadata.
     * @deny (create, update, delete) Only admins can create, update, or delete images.
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /images/{imageId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User with ID 'user123' can create purchase record under their ID.
     *          `request.auth.uid` must be 'user123'. `request.resource.data.userId` must be 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can access and modify their purchase history.
     *          `request.auth.uid` must be 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot access user 'user123' purchase history.
     *          `request.auth.uid` is 'user456', but path is /users/user123/purchases/{purchaseId}.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Secures image-specific purchase history (admin analytics).
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) Only admins can access and modify image purchase history.
     * @principle Restricts access to authorized users.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Determines administrative privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) Only the user themselves can create their admin role entry.
     * @allow (get, update, delete) Only admins can manage other admins.
     * @principle Existence of document grants admin privileges.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures aggregated sales and revenue data.
     * @path /analytics/sales
     * @allow (get, update) Only admins can access and modify analytics data.
     * @principle Restricts access to authorized users.
     */
    match /analytics/sales {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}