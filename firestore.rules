/**
 * @file Firebase Security Rules for FocusFinds Application
 *
 * @core-philosophy This ruleset enforces a strict user-ownership model for user-specific data
 * and restricts administrative functionality to authorized users. Data validation is relaxed
 * to facilitate rapid prototyping, focusing primarily on authorization and relational integrity.
 *
 * @data-structure
 * - `/users/{userId}`: Stores user profile information, accessible only to the user and admins.
 * - `/images/{imageId}`: Stores image metadata, publicly readable, owner-only writes.
 * - `/users/{userId}/purchases/{purchaseId}`: Stores purchase history for each user, accessible only to the user.
 * - `/images/{imageId}/purchases/{purchaseId}`: Stores anonymous purchase data for images, accessible only to admins.
 * - `/roles_admin/{userId}`: Presence indicates admin privileges, accessible only to admins.
 * - `/analytics/sales`: Stores aggregated sales data, accessible only to admins.
 * - `/settings/main`: Stores global site settings, publicly readable, admin-only writes.
 *
 * @key-security-decisions
 * - User listing is explicitly denied to protect user privacy.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Public read access is granted to `/images/{imageId}` and `/settings/main`.
 * - Relational integrity is enforced by validating userId and imageId in purchase documents.
 * - Data validation is relaxed, focusing on authorization and relational integrity.
 *
 * @denormalization-for-authorization
 * - Purchase documents under `/users/{userId}/purchases/{purchaseId}` MUST include the `userId` field
 *   matching the path parameter to avoid costly `get()` calls.
 * - Purchase documents under `/images/{imageId}/purchases/{purchaseId}` are associated to an image
 *   and used for admin analytics.
 *
 * @structural-segregation
 * - User profile information and purchase history are stored in separate subcollections under `/users/{userId}`
 *   to maintain clear ownership and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Enforces user-ownership for writes.
     * @param {string} ownerId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is creating a resource for themselves, false otherwise.
     */
    function isCreatingOwnedBy(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
    }

    /**
     * @description Checks if the authenticated user has sales analyst privileges.
     * @returns {boolean} True if the user is a sales analyst, false otherwise.
     */
    function isSalesAnalyst() {
      return isAdmin(); // For now, sales analysts are also admins.
    }


    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (read) User 'jupiterbania472@gmail.com' (qGFhOv8t60R8OMvoWaVz3229L4B3) can read their own profile.
     * @allow (create) User 'jupiterbania472@gmail.com' (qGFhOv8t60R8OMvoWaVz3229L4B3) can create their own profile.
     * @deny (read) User 'test@example.com' cannot read another user's profile.
     * @deny (create) User 'test@example.com' cannot create a profile for another user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for image metadata.
     * @path /images/{imageId}
     * @allow (read) Any user can read image metadata.
     * @allow (create) Only admins can create new images.
     * @deny (update) Non-admin users cannot update image metadata.
     * @principle Enforces document ownership for writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for user purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User 'jupiterbania472@gmail.com' (qGFhOv8t60R8OMvoWaVz3229L4B3) can create their own purchase record.
     * @allow (read) User 'jupiterbania472@gmail.com' (qGFhOv8t60R8OMvoWaVz3229L4B3) can read their own purchase record.
     * @deny (create) User 'test@example.com' cannot create a purchase record for another user.
     * @principle Restricts access to a user's own purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get, list: if isOwner(userId);
      allow create: if isCreatingOwnedBy(userId) && request.resource.data.userId == userId;
      allow update: if false; // Purchases cannot be updated once created.
      allow delete: if false; // Purchases cannot be deleted.
    }

     /**
      * @description Rules for admin purchase data on images.
      * @path /images/{imageId}/purchases/{purchaseId}
      * @allow (read) Only sales analysts can read purchase data.
      * @allow (write) Only sales analysts can write purchase data.
      * @principle Admin-only access to sensitive analytics data.
      */
    match /images/{imageId}/purchases/{purchaseId} {
        allow get, list: if isSalesAnalyst();
        allow create: if isSalesAnalyst();
        allow update: if isSalesAnalyst();
        allow delete: if isSalesAnalyst();
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (read) Only admins can read the roles_admin collection.
     * @allow (write) Only admins can write to the roles_admin collection.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for aggregated sales data.
     * @path /analytics/sales
     * @allow (read) Only sales analysts can read aggregated sales data.
     * @allow (write) Only sales analysts can write aggregated sales data.
     * @principle Admin-only access to sensitive analytics data.
     */
    match /analytics/sales {
      allow get: if isSalesAnalyst();
      allow list: if false;
      allow create: if isSalesAnalyst();
      allow update: if isSalesAnalyst();
      allow delete: if isSalesAnalyst();
    }

    /**
     * @description Rules for global site settings.
     * @path /settings/main
     * @allow (read) All users can read site settings.
     * @allow (write) Only admins can modify site settings.
     * @principle Public read access, admin-only writes.
     */
    match /settings/main {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}