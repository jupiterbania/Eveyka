/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, blending user-owned data with
 * publicly readable content, and administrative override capabilities.  It prioritizes
 * data ownership and restricts access based on user roles where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user and admins.
 * - /images/{imageId}: Image metadata, publicly readable, writable only by admins, or by an authenticated user
 *   on the `/images/{imageId}/purchases/{purchaseId}` subcollection path (to record purchase events).
 * - /users/{userId}/purchases/{purchaseId}: Purchase history for each user, accessible only to the user and admins.
 * - /images/{imageId}/purchases/{purchaseId}: Anonymous purchase data, for admin analytics. Owner is the image ID.
 * - /roles_admin/{userId}: Admin role assignments. Presence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - User data is strictly controlled, enforcing ownership and preventing unauthorized access.
 * - Images are publicly readable, but writes are restricted to prevent abuse.
 * - Administrative roles are managed through a dedicated collection, enabling privileged operations.
 * - User listing is disabled for privacy.
 *
 * Denormalization for Authorization:
 * - The /images/{imageId}/purchases/{purchaseId} documents denormalize the userId. This allows the rule to be secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the resource (isSignedIn, isOwner, and resource exists).
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has admin privileges by verifying the existence of a document at /roles_admin/{userId}.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user with ID 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user with ID 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for image metadata. Publicly readable, writable by admins or owner.
     * @path /images/{imageId}
     * @allow (get) Any user can read image metadata.
     * @allow (list) Any user can list image metadata.
     * @deny (create) Non-admin users cannot create image metadata.
     * @deny (update) Non-admin users cannot update image metadata.
     * @principle Public read access with owner-only (admin) writes.
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get) User with ID 'user123' can read their own purchase history.
     * @allow (create) User with ID 'user123' can create a purchase record in their own purchase history.
     * @allow (update) User with ID 'user123' can update a purchase record in their own purchase history.
     * @deny (get) User with ID 'user456' cannot read the purchase history of user with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create a purchase record for user with ID 'user123'.
     * @deny (update) User with ID 'user456' cannot update the purchase history of user with ID 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for anonymous purchase data associated with an image.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (create) Any signed in user can create a purchase record. The userId field in resource data must match request.auth.uid
     * @allow (get) Admins can get purchase records.
     * @allow (list) Admins can list purchase records.
     * @deny (create) User cannot create a purchase record for another user.
     * @deny (update) Non-admin users cannot update purchase records.
     * @principle Allows public creation of purchase records but restricts modification and deletion to admins.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for admin role assignments.
     * @path /roles_admin/{userId}
     * @allow (get) Admins can check for other admins.
     * @allow (create) Only admins can grant admin role to a user.
     * @deny (create) Non-admin users cannot assign themselves or others as admins.
     * @principle Restricts admin role assignments to existing administrators.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }
  }
}