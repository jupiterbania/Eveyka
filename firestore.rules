/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public read access for certain collections with strict owner-based or admin-based write access.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user and admins.
 * - /images/{imageId}: Image metadata, publicly readable, but writable only by admins (currently, should be updated to be owner-writable).
 * - /users/{userId}/purchases/{purchaseId}: Purchase history for a specific user, accessible only to that user.
 * - /images/{imageId}/purchases/{purchaseId}: Purchase history for a specific image, primarily for anonymous analytics.
 * - /roles_admin/{userId}:  Indicates admin privileges. The *existence* of a document grants admin rights to the user ID matching the document ID. Document content is not considered.
 * - /settings/main: Singleton document with site-wide settings, publicly readable, but only writable by admins.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the absence of a top-level `/users` collection listing rule.
 * - The `images` collection is publicly readable. Write access is restricted to admins (should be owner based, see note below).
 *
 * Denormalization for Authorization:
 * - Admin privileges are determined by the *existence* of a document in the `/roles_admin/{userId}` collection, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is an existing owner of the resource.
      * @param {string} userId - The user ID to compare against the resource's owner ID.
      * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
     function isExistingOwner(userId) {
       return isOwner(userId) && resource != null;
     }

    /**
     * @description Checks if the current user has admin privileges.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (get, update, delete) - An unauthenticated user cannot access or modify any profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for images.
     * @path /images/{imageId}
     * @allow (get, list) - Anyone can read images.
     * @allow (create, update, delete) - Only admins can manage images.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete images.
     * @principle Public read access with admin-only writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create, get, update, delete) - Only the user can manage their own purchase history.
     * @deny (create, get, update, delete) - Other users and non-authenticated users cannot access this data.
     * @principle Restricts access to a user's own purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for anonymous image-specific purchase data (for admin analytics).
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (create, get, update, delete) - Only admins can manage this data.
     * @deny (create, get, update, delete) - Non-admins cannot access or modify this data.
     * @principle Admin-only access for analytics data.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for admin roles. The *existence* of a document in this collection grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) - Only a user can create their admin role document if they provide correct ownership.
     * @allow (get) - Only admins can check for admin roles of any user (for tooling).
     * @allow (delete) - Only admins can remove admin roles.
     * @deny (create) -  If ownership validation fails.
     * @principle DBAC - Existence over Content, enforces admin-only management of admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rules for site-wide settings (singleton document).
      * @path /settings/main
      * @allow (get) - Anyone can read the settings.
      * @allow (update) - Only admins can update the settings.
      * @deny (update) - Non-admins cannot modify the settings.
      * @principle Public read access with admin-only writes for site settings.
      */
    match /settings/main {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}