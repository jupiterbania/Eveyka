/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public read access for some content with strict user-ownership and admin-only access for sensitive data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user and admins.
 * - /images/{imageId}: Image metadata, publicly readable but writable only by admins (TODO: or image owners, after schema update).
 * - /users/{userId}/purchases/{purchaseId}: Purchase history for each user, accessible only to the user and admins.
 * - /images/{imageId}/purchases/{purchaseId}: Purchase history for each image, for admin analytics, accessible only to admins.
 * - /roles_admin/{userId}:  DBAC (Database-Controlled Access) collection, grants admin privileges if a document exists for the user.
 * - /analytics/sales: A single document with aggregated sales data, only accessible to admins.
 *
 * Key Security Decisions:
 * - Images are publicly readable. Writes are restricted to admins (TODO: change to owner-only after schema update).
 * - User profiles and purchase history are strictly user-owned.
 * - Listing of the /roles_admin collection is denied.
 * - The /analytics/sales collection is only readable and writable by admins.
 *
 * Denormalization for Authorization:
 * - Admin privileges are checked via document existence in the `/roles_admin/{userId}` collection.
 * - The images/{imageId} entity does not have an authorId or ownerId.  This means create, update and delete actions are not available to normal users and need to be granted to admins only.  A future iteration would include the addition of the authorId.
 *
 * Structural Segregation:
 * - Private user data (profiles, purchases) are stored under the /users/{userId} path, separate from public image data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile information, limited to the user and administrators.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner or an admin.
     *   Example (get): User with UID 'user123' can access /users/user123.
     *   Example (create): User with UID 'user123' can create /users/user123 (self-creation).
     * @deny (get, create, update, delete, list) if the user is not the owner or an admin.
     *   Example (get): User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Verified user id matches record user id
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to image metadata, but restricts write access to administrators.
     * @path /images/{imageId}
     * @allow (get, list) to anyone.
     *   Example (get): Any user can access /images/image123.
     *   Example (list): Any user can list images in /images.
     * @deny (create, update, delete) to non-admins.
     *   Example (create): User with UID 'user123' cannot create /images/image123 unless they are an admin.
     * @principle Allows public read access but enforces admin-only writes for image management.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access to purchase history for each user, limited to the user and administrators.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get, create, update, delete, list) if the user is the owner or an admin.
     *   Example (get): User with UID 'user123' can access /users/user123/purchases/purchase456.
     *   Example (create): User with UID 'user123' can create /users/user123/purchases/purchase456.
     * @deny (get, create, update, delete, list) if the user is not the owner or an admin.
     *   Example (get): User with UID 'user456' cannot access /users/user123/purchases/purchase456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Allows access to purchase data for each image, limited to administrators for analytics purposes.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, create, update, delete, list) only if the user is an admin.
     *   Example (get): Admin can access /images/image123/purchases/purchase456.
     *   Example (create): Admin can create /images/image123/purchases/purchase456.
     * @deny (get, create, update, delete, list) if the user is not an admin.
     *   Example (get): User with UID 'user123' cannot access /images/image123/purchases/purchase456 unless they are an admin.
     * @principle Restricts access to sensitive analytics data to administrators only.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages administrator roles.  Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow create: if isSignedIn() and isOwner(userId)
     *   Example (create): create an admin record.
     * @principle DBAC - Existence over Content
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
        allow update: if false;
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows access to aggregated sales and revenue data, limited to administrators.
     * @path /analytics/sales
     * @allow (get, create, update, delete) only if the user is an admin.
     *   Example (get): Admin can access /analytics/sales.
     *   Example (create): Admin can create /analytics/sales.
     * @deny (get, create, update, delete) if the user is not an admin.
     *   Example (get): User with UID 'user123' cannot access /analytics/sales unless they are an admin.
     * @principle Restricts access to sensitive analytics data to administrators only.
     */
    match /analytics/sales {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}