/**
 * @fileOverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public read access for certain collections (e.g., 'images') with strict user-ownership and administrative controls for others (e.g., 'users', 'purchases'). It prioritizes data privacy and prevents unauthorized data modification.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves and admins.
 * - /images/{imageId}: Publicly accessible image metadata. Writes restricted to authorized users.
 * - /users/{userId}/purchases/{purchaseId}: Purchase history for individual users, accessible only to the user.
 * - /images/{imageId}/purchases/{purchaseId}: Anonymized purchase data for sales tracking and admin analytics.
 * - /roles_admin/{userId}: Indicates admin privileges based on the existence of a document, not its content.
 * - /settings/main: A singleton document for site-wide settings (e.g., the hero image). Only admins can modify.
 *
 * Key Security Decisions:
 * - Public Read Access for Images: Image metadata is publicly readable to enable browsing.
 * - Ownership Model: User data and purchases are strictly controlled by the owning user.
 * - Admin Roles: Administrative privileges are determined by the presence of a document in the 'roles_admin' collection.
 * - Singleton Document: The /settings/main document is treated as a singleton, with restricted write access.
 *
 * Denormalization for Authorization:
 * - Admin Status: The rules check for admin status by verifying the existence of a document in the /roles_admin/{userId} collection, avoiding the need to store redundant 'isAdmin' fields in user documents.
 *
 * Structural Segregation:
 * - Public vs. Private Collections: Images are stored in a top-level collection for public access, while user-specific purchases are stored in subcollections under each user's document. This simplifies rules and enhances security for private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner access to user profiles.
     * @path /users/{userId}
     * @allow (get, list, update, delete) if the user is the owner. (create) if the authenticated user ID matches the userId.
     * @deny (get, list, update, delete) if the user is not the owner. (create) if the authenticated user ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants public read access to image metadata and restricts write access to administrators.
     * @path /images/{imageId}
     * @allow (get, list) to anyone. (create, update, delete) to admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Allows public reads but enforces admin-only writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants owner access to user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) if the user is the owner.
     * @deny (get, list, create, update, delete) if the user is not the owner.
     * @principle Enforces strict user ownership for purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

     /**
      * @description Grants admin access to anonymous purchase data for analytics.
      * @path /images/{imageId}/purchases/{purchaseId}
      * @allow (get, list, create, update, delete) if the user is an admin.
      * @deny (get, list, create, update, delete) if the user is not an admin.
      * @principle Restricts access to sales data to authorized admins only.
      */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) if the authenticated user ID matches the document ID.
     * @deny (get, create, update, delete) if the authenticated user ID does not match the document ID.
     * @principle Implements DBAC (Database-level Access Control) based on document existence.
     */
    match /roles_admin/{userId} {
      function isSelf(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isSelf(userId);
      allow list: if false;
      allow create: if isSelf(userId);
      allow update: if isSelf(userId) && resource != null;
      allow delete: if isSelf(userId) && resource != null;
    }

    /**
     * @description Restricts write access to the site settings document to administrators.
     * @path /settings/main
     * @allow get: if true. (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only modification of global site settings.
     */
    match /settings/main {
      allow get: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}