/**
 * @file Firebase Security Rules for FocusFinds Application
 * @version 2
 *
 * @description
 * This ruleset prioritizes a user-centric security model with administrative overrides. It provides secure access to user profiles, images, and purchase history, while incorporating safeguards against unauthorized data modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /images/{imageId}: Stores image metadata and URLs.
 * - /users/{userId}/purchases/{purchaseId}: Tracks a user's purchase history.
 * - /images/{imageId}/purchases/{purchaseId}: Tracks image purchase history (for analytics).
 * - /roles_admin/{userId}: Presence of a document grants admin privileges to a user.
 * - /analytics/sales: Stores aggregated application analytics.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Image metadata is publicly readable but write-protected.
 * - Purchases are generally readable by the owning user or an admin. Image purchases are write-protected and meant only for analytics.
 * - Listing of user documents is explicitly denied to protect user privacy.
 * - Administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly present in the provided data model. However, the `userId` field in the `Purchase` entity acts as a denormalized owner ID, simplifying ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the user and admins to read/write.
     * @path /users/{userId}
     * @allow (read, write) User with ID 'user123' can read/write their own profile.
     * @deny (read, write) User with ID 'user456' cannot read/write 'user123' profile.
     * @principle Enforces strict user ownership and admin override for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Prevent listing of all users.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Images are publicly readable, but writes are disallowed in the current setup.
     * @path /images/{imageId}
     * @allow (read) Any user can read image metadata.
     * @deny (write) No user can write to the image collection.
     * @principle Public read access with restricted writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure purchase history for users, allowing only the user and admins to read/write.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (read, write) User with ID 'user123' can read/write their own purchase history.
     * @deny (read, write) User with ID 'user456' cannot read/write 'user123' purchase history.
     * @principle Enforces user ownership for purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Image purchase history (for analytics), writes are disallowed in the current setup.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (read) Any user can read data in image purchase history.
     * @deny (write) Only the server can create, update, and delete image purchases, which is disallowed by this rule.
     * @principle Server-only writes for analytics data.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Admin roles are granted by the existence of a document.
     * @path /roles_admin/{userId}
     * @allow (create) A server function can create these documents.
     * @deny (read, write) Regular users cannot read, create, update or delete admin role documents.
     * @principle DBAC - Existence over Content - Existence grants admin rights
     */
    match /roles_admin/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Analytics data.  Writes are disallowed in the current setup.
     * @path /analytics/sales
     * @allow (read) Any user can read data in image purchase history.
     * @deny (write) Only the server can create, update, and delete image purchases, which is disallowed by this rule.
     * @principle Server-only writes for analytics data.
     */
    match /analytics/sales {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}