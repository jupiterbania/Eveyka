/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, primarily based on user-ownership for personal data and administrator access for aggregated analytics.
 *
 * Data Structure:
 * - `/users/{userId}`: User profiles, accessible only to the user and admins.
 * - `/images/{imageId}`: Publicly accessible image metadata.
 * - `/users/{userId}/purchases/{purchaseId}`: Purchase history for each user, accessible only to the user.
 * - `/images/{imageId}/purchases/{purchaseId}`: Purchase data for each image, accessible to anyone.
 * - `/roles_admin/{userId}`: Indicates administrator roles. Existence of a document grants admin privileges.
 * - `/analytics/sales`: Aggregated analytics data, accessible only to administrators.
 *
 * Key Security Decisions:
 * - User profiles are strictly controlled: only the user or an admin can read/write them.
 * - Image metadata is publicly readable, but only an admin can create, update, or delete it.
 * - Purchase history is private to the user.
 * - The analytics collection is restricted to admin access only.
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in `/roles_admin/{userId}`, avoiding the need to store the `isAdmin` field inside the `/users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in /roles_admin/{userId}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User with UID 'qGFhOv8t60R8OMvoWaVz3229L4B3' can read their own profile.
     * @allow (create) User with UID 'qGFhOv8t60R8OMvoWaVz3229L4B3' can create their profile.
     * @deny (get) User with UID 'otherUserId' cannot read user 'qGFhOv8t60R8OMvoWaVz3229L4B3' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Listing users is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for image metadata.
     * @path /images/{imageId}
     * @allow (get) Any user can read image metadata.
     * @deny (create) Non-admin user cannot create image metadata.
     * @principle Public read access with admin-only writes.
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get) User with UID 'qGFhOv8t60R8OMvoWaVz3229L4B3' can read their own purchase history.
     * @deny (create) User with UID 'otherUserId' cannot create purchase history for user 'qGFhOv8t60R8OMvoWaVz3229L4B3'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for image-specific purchase data (admin analytics).
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get) Any user can read image purchase data.
     * @deny (create) Non-admin user cannot create image purchase data.
     * @principle Public read access with admin-only writes.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if true;
      allow list: if true;
      allow create: if true; // Intentionally open for prototyping
      allow update: if false; // Intentionally closed for prototyping
      allow delete: if false; // Intentionally closed for prototyping
    }

    /**
     * @description Rules for administrator roles.
     * @path /roles_admin/{userId}
     * @allow (get) User with UID 'qGFhOv8t60R8OMvoWaVz3229L4B3' can check if they have an admin role.
     * @deny (create) Non-admin user cannot assign themselves an admin role.
     * @principle Restricts admin role creation to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // No listing of admins.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for aggregated sales analytics.
     * @path /analytics/sales
     * @allow (get) Only admin users can read sales analytics.
     * @deny (create) Non-admin users cannot create or modify sales analytics.
     * @principle Restricts access to sensitive analytics data to administrators.
     */
    match /analytics/sales {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}