/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open read access for public content with strict ownership and admin-based control for private data and administrative functions.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /images/{imageId}: Image metadata, publicly readable.
 * - /users/{userId}/purchases/{purchaseId}: Purchase history for individual users, only accessible to that user.
 * - /images/{imageId}/purchases/{purchaseId}: Purchase data for images, publicly accessible.
 * - /roles_admin/{userId}: Admin role assignment, presence of document grants admin status.
 * - /analytics/sales: Aggregated sales data, writable only by admins.
 * - /settings/main: Site-wide settings, writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect privacy.
 * - Public read access is granted to the /images collection to enable content discovery.
 * - The rules strongly enforce ownership for user profiles and purchases.
 * - Administrative privileges are granted based on the existence of a document in the /roles_admin collection.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in `/roles_admin/{userId}`. This avoids needing to store admin status within the user document itself.
 * - No denormalization is needed for user-owned documents, as the path itself (/users/{userId}/...) provides the necessary context.
 *
 * Structural Segregation:
 * - Public images are stored in a top-level `/images` collection for easy discovery.
 * - Private purchase data is stored under each user's profile in the `/users/{userId}/purchases` subcollection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     *              This is used for update and delete operations.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is an administrator.
     * @returns {boolean} True if the user is an administrator, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creating their own profile.
     * @allow (get, update, delete) Signed-in user accessing their own profile.
     * @deny (create) Signed-in user attempting to create another user's profile.
     * @deny (get, update, delete) Signed-in user attempting to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to image metadata while restricting write access.
     * @path /images/{imageId}
     * @allow (get, list) Public read access to image metadata.
     * @deny (create, update, delete) No write access allowed.
     * @principle Public read, owner-only write.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces document ownership for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) Signed-in user creating a purchase record under their own profile.
     * @allow (get, update, delete) Signed-in user accessing their own purchase records.
     * @deny (create) Signed-in user attempting to create a purchase record under another user's profile.
     * @deny (get, update, delete) Signed-in user attempting to access another user's purchase records.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

      /**
     * @description Allows public read access to image-specific purchase data for admin analytics. Write is disabled.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, list) Public read access to image-specific purchase data.
     * @deny (create, update, delete) No write access allowed.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to admin role assignments.
     * @path /roles_admin/{userId}
     * @allow (create) Only admins can create admin role assignments.
     * @allow (get) Only admins can read admin role assignments.
     * @allow (update) Only admins can update admin role assignments.
     * @allow (delete) Only admins can delete admin role assignments.
     * @deny Any non-admin user attempting to modify role assignments.
     * @principle Database Admin Control (DBAC) - Existence over Content.
     */
    match /roles_admin/{userId} {
      allow get, create, update, delete: if isAdmin();
      allow list: if false;
    }

    /**
     * @description Restricts access to aggregated sales data to administrators only.
     * @path /analytics/sales
     * @allow (get) Public read access to sales data.
     * @allow (update) Only admins can update sales data.
     * @deny Non-admin users attempting to modify sales data.
     * @principle Admin-only write access.
     */
    match /analytics/sales {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }

     /**
     * @description Restricts access to site-wide settings to administrators only.
     * @path /settings/main
     * @allow (get) Public read access to site settings.
     * @allow (update) Only admins can update site settings.
     * @deny Non-admin users attempting to modify site settings.
     * @principle Admin-only write access.
     */
    match /settings/main {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}