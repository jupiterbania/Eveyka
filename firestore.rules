rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an administrator.
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to images, but restricts write access to administrators.
     * @path /images/{imageId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete images.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Public read access with owner-only writes.
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows users to manage their own purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes within the user's data tree.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows administrators to analyze purchase data.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) only if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow create, update, delete: only if the user's ID matches the document ID.
     * @allow get: only if the user's ID matches the document ID OR the user is an admin.
     * @principle Database enforced access control (DBAC).
     */
    match /roles_admin/{userId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(userId) || isAdmin();
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Restricts access to analytics data to administrators.
     * @path /analytics/sales
     * @allow (get, create, update, delete) only if the user is an admin.
     * @deny (get, create, update, delete) if the user is not an admin.
     * @principle Restricts access to sensitive data to authorized personnel.
     */
    match /analytics/sales {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}