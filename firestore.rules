/**
 * @file Firebase Security Rules for FocusFinds application.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and purchases.
 * Images are publicly readable but only writable by authenticated users. Administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * @dataStructure The data is organized as follows:
 *   - `/users/{userId}`: User profile information.
 *   - `/images/{imageId}`: Image metadata.
 *   - `/users/{userId}/purchases/{purchaseId}`: Purchase history for each user.
 *   - `/images/{imageId}/purchases/{purchaseId}`: Purchase history for each image.
 *   - `/roles_admin/{userId}`: Administrator role assignments (DBAC).
 *
 * @keySecurityDecisions
 *   - Users can only read and write their own profile data.
 *   - Images are publicly readable.
 *   - Image creation is allowed for authenticated users.
 *   - Image updates and deletes are allowed for the user who created the image. The 'ownerId' field must exist for this to work.
 *   - Listing of users is disallowed.
 *   - Purchases are user-owned, and users can only manage their own purchase history.
 *   - Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection (DBAC - Existence over Content).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is an existing owner.
      * @param {string} userId The user ID to compare against the authenticated user's ID.
      * @return {boolean} True if the user is the owner and resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying if a document exists for them in the /roles_admin collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create another user's profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for image documents.
     * @path /images/{imageId}
     * @allow (get, list) Anyone can read image data.
     * @allow (create) Authenticated user can create an image.
     * @allow (update, delete) Only the image owner can modify or delete the image.
     * @deny (create) Unauthenticated users cannot create images.
     * @principle Public read with owner-only writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for purchase documents within a user's profile.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get) Authenticated user can read their own purchase history.
     * @allow (create) Authenticated user can create purchase records for themselves.
     * @allow (update) Authenticated user can update their own purchase records.
     * @deny (get) Authenticated user cannot read another user's purchase history.
     * @deny (create) Authenticated user cannot create purchase records for other users.
     * @deny (update) Authenticated user cannot update another user's purchase records.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for purchase documents within an image profile, for analytics.
      * @path /images/{imageId}/purchases/{purchaseId}
      * @allow (get) Admin can read image purchase data.
      * @allow (create) Admin can create image purchase records.
      * @allow (update) Admin can update image purchase records.
      * @deny (get) Non-Admin cannot read image purchase data.
      * @deny (create) Non-Admin cannot create image purchase records.
      * @deny (update) Non-Admin cannot update image purchase records.
      * @principle Enforces Admin-Only access
      */
    match /images/{imageId}/purchases/{purchaseId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for administrator role documents.
     * @path /roles_admin/{userId}
     * @allow (get, create) Only the user themselves can create their admin role document.
     * @allow (delete) An admin can delete other admin roles.
     * @deny (create) Non-admins cannot grant themselves admin privileges.
     * @principle DBAC - Existence over Content.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin() || isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if false;
    }
  }
}