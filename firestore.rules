/**
 * @file Firebase Security Rules for FocusFinds Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and purchases,
 *                  and role-based access control for administrative functions and analytics.
 *                  Public read access is granted to images and site settings, but writes are restricted.
 *
 * @data_structure
 *   - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 *   - /images/{imageId}: Stores image metadata, publicly readable but writable only by authorized users (TBD).
 *   - /users/{userId}/purchases/{purchaseId}: Stores purchase history for each user, accessible only to the user themselves.
 *   - /images/{imageId}/purchases/{purchaseId}: Stores purchase history for each image, writable by anyone who purchased the image.
 *   - /roles_admin/{userId}: Presence of a document indicates admin status.
 *   - /analytics/sales: A singleton document for aggregated sales data, writable only by admins.
 *   - /settings/main: A singleton document for site-wide settings, writable only by admins.
 *
 * @key_security_decisions
 *   - User listing is disallowed to protect user privacy.
 *   - Admin status is determined by the existence of a document in `/roles_admin/{userId}`.
 *   - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * @denormalization_for_authorization
 *   - Admin status is denormalized into the rules logic using the `isAdmin()` function, avoiding the need for `get()` calls to the `/roles_admin` collection.
 *   - Image ownership (who is allowed to edit an image) is not defined in the `backend.json`, so writes on images are currently disallowed.
 *
 * @structural_segregation
 *   - User-specific data (profiles and purchases) is stored under the `/users/{userId}` path, ensuring private access.
 *   - Publicly accessible image metadata is stored in the top-level `/images/{imageId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, allowing only the user themselves to read and write their own data.
     * @path /users/{userId}
     * @allow (create, update, get, delete) User with ID 'user123' can create/update/get/delete their own profile at /users/user123.
     * @deny (create, update, get, delete) User with ID 'user456' cannot access profile data at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to image metadata. Publicly readable, but writes are restricted to authorized users.
     * @path /images/{imageId}
     * @allow get, list: Public read access is allowed for image metadata.
     * @deny create, update, delete: All write access is currently denied (no ownership defined).
     * @principle Public read access with restricted writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages purchase history for each user, accessible only to the user themselves.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create, update, get, delete) User with ID 'user123' can create/update/get/delete their own purchase history at /users/user123/purchases/purchase1.
     * @deny (create, update, get, delete) User with ID 'user456' cannot access purchase history at /users/user123/purchases/purchase1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

       /**
         * @description Stores anonymous purchase data for an image, for admin analytics.
         * @path /images/{imageId}/purchases/{purchaseId}
         * @allow create: Any authenticated user can create a purchase record for an image they bought.
         * @deny get, list, update, delete: Only creation of purchase records is allowed here.
         * @principle Allows public creation with owner-only access.
         */
        match /images/{imageId}/purchases/{purchaseId} {
            function isSignedIn() {
                return request.auth != null;
            }
            allow get, list, update, delete: if false;
            allow create: if isSignedIn();
        }

    /**
     * @description Manages admin roles. Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow create: Only allows creation of admin roles.
     * @deny get, list, update, delete: No read/write operations allowed directly on the document. Admin status is checked via `isAdmin()` function.
     * @principle DBAC - Existence over Content.
     */
    match /roles_admin/{userId} {
       function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
      allow get, list, update, delete: if false;
      allow create: if true; // Role assignment handled externally (e.g., via Cloud Functions).
    }

    /**
     * @description Controls access to the analytics sales document. Only admins can modify this data.
     * @path /analytics/sales
     * @allow get: Public read access to analytics data.
     * @deny create, update, delete: Only admins can modify analytics data.
     * @principle Restricts write access to admins.
     */
    match /analytics/sales {
      function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
      allow get: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
       * @description Manages global site settings like the hero image. Only admins can modify these settings.
       * @path /settings/main
       * @allow get: Public read access to site settings.
       * @deny create, update, delete: Only admins can modify site settings.
       * @principle Restricts write access to admins.
       */
      match /settings/main {
         function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
  }
}