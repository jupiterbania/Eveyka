/**
 * @file Firestore Security Rules for FocusFinds Application
 * @core_philosophy This ruleset implements a hybrid security model: user-owned data with some public read access and role-based administrative privileges.
 * @data_structure
 *   - /users/{userId}: Stores user profiles, accessible only to the user and admins.
 *   - /images/{imageId}: Stores image metadata, publicly readable but writable only by admins.
 *   - /users/{userId}/purchases/{purchaseId}: Stores user-specific purchase history, accessible only to the user and admins.
 *   - /images/{imageId}/purchases/{purchaseId}: Stores purchase data for images, for admin analytics
 *   - /roles_admin/{userId}: Indicates admin privileges; document existence grants admin access.
 *   - /analytics/sales: Stores aggregated sales and revenue data, writable only by admins.
 * @key_security_decisions
 *   - User listing is disallowed for privacy.
 *   - Admin privileges are determined by document existence in /roles_admin/{userId}, not by a field within the user document.
 *   - Public read access is granted to image metadata to showcase available images.
 * @denormalization_for_authorization
 *   - Admin status is checked via the existence of a document in /roles_admin/{userId} to avoid costly queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user has admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for images.
     * @path /images/{imageId}
     * @allow (get) Any user can read image metadata.
     * @deny (create) Regular users cannot create image metadata.
     * @allow (create) Admin user can create image metadata.
     * @principle Public read access with admin-only writes.
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User with UID 'user123' can create a purchase record under /users/user123/purchases/purchase001.
     * @deny (create) User with UID 'user456' cannot create a purchase record under /users/user123/purchases/purchase001.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

       /**
        * @description Rules for image-specific purchase data, used for analytics.
        * @path /images/{imageId}/purchases/{purchaseId}
        */
       match /images/{imageId}/purchases/{purchaseId} {
         allow get: if isAdmin();
         allow list: if isAdmin();
         allow create: if isAdmin();
         allow update: if isAdmin() && resource != null;
         allow delete: if isAdmin() && resource != null;
       }

    /**
     * @description Rules for administrator roles. Existence grants access.
     * @path /roles_admin/{userId}
     * @allow (create) Only an existing admin can grant admin rights.
     * @deny (create) A regular user cannot grant themselves admin rights.
     * @principle Database Admin Control (DBAC) via document existence.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // No listing of admins allowed.
      allow create: if isAdmin();
      allow update: if false; // Admin privileges are granted/revoked by creating/deleting the document.
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for aggregated analytics data.
     * @path /analytics/sales
     * @deny (create) Regular users cannot create analytics data.
     * @allow (update) Only admins can update analytics data.
     * @principle Admin-only access to aggregated data.
     */
    match /analytics/sales {
      allow get: if isAdmin();
      allow list: if false; // Only one document exists; no listing needed.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if false; // Analytics should not be deleted.
    }
  }
}