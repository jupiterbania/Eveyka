
/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public read access for certain data with strict owner-only or admin-only write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user and admins.
 * - /media/{mediaId}: Stores media metadata, publicly readable but writable only by admins.
 * - /roles_admin/{userId}: Indicates admin privileges; presence of document grants access.
 * - /settings/main: A singleton document for site-wide settings, writeable only by admins.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Media metadata is publicly readable to enable browsing. Write access is restricted to admins.
 * - The existence of a document in `/roles_admin/{userId}` grants the user admin privileges.
 * - The `settings/main` document is writeable by admins only, allowing for global site settings management.
 * - No user listing is allowed to prevent data scraping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // No user listing allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    match /media/{mediaId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    match /roles_admin/{userId} {
      allow get, create, delete: if isAdmin();
      allow list, update: if false;
    }

    match /settings/main {
      allow get: if true;
      allow update: if isAdmin();
      allow create, delete: if false;
    }
  }
}
