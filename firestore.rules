/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing public accessibility with strict ownership and administrative controls.
 * Public data (e.g., images) is readable by all, while user-specific data and administrative functions are heavily restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only to the user and admins.
 * - /images/{imageId}: Stores image metadata; publicly readable, writable only by admins or the image owner.
 * - /users/{userId}/purchases/{purchaseId}: Stores individual user's purchase history; accessible only to the user.
 * - /images/{imageId}/purchases/{purchaseId}: Stores purchase history for each image; accessible only to admins for aggregate tracking.
 * - /roles_admin/{userId}: Indicates admin privileges; existence of a document grants admin access.
 * - /analytics/sales: Stores aggregated analytics data; accessible only to admins.
 * - /settings/main: Stores site-wide settings; publicly readable, writable only by admins.
 *
 * Key Security Decisions:
 * - Public Read Access for Images: Images are publicly readable to maximize discoverability.
 * - Admin Role via Document Existence: Admin privileges are granted by the presence of a document in the `/roles_admin` collection. This simplifies role management.
 * - Denormalization for Authorization: The `isAdmin()` function checks for the existence of a document in `/roles_admin/{userId}` to grant admin privileges. This avoids complex queries.
 * - No User Listing: Listing all users is disallowed to protect user privacy.
 * - Purchase history is scoped at both the user and image levels; the image level enables data aggregation for analytics without exposing user-specific information.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in the `/roles_admin/{userId}` collection, avoiding the need to store an `isAdmin` flag on each user document and eliminating extra reads during authorization checks.
 *
 * Structural Segregation:
 * - Purchase information is stored in two separate subcollections: `/users/{userId}/purchases/{purchaseId}` (private user data) and `/images/{imageId}/purchases/{purchaseId}` (public image data). This allows for public read access on images while protecting the user's purchase history.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     *               Use this for update and delete operations.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (create) - Non-authenticated users cannot create user profiles.
     * @deny (list) - No one can list all the users.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /images/{imageId} documents.
     * @path /images/{imageId}
     * @allow (get, list) - Anyone can read image metadata.
     * @allow (create) - Only admins can create new image entries.
     * @allow (update, delete) - Only admins can modify or delete image entries.
     * @deny (create, update, delete) - Non-admins cannot modify image entries.
     * @principle Public read access for images, admin-only writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for /users/{userId}/purchases/{purchaseId} documents.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create, get, update, delete, list) - Authenticated user can manage their own purchase history.
     * @deny (create, get, update, delete, list) - Other users cannot access another user's purchase history.
     * @principle Restricts access to a user's own purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /images/{imageId}/purchases/{purchaseId} documents.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, list) - Only admins can read purchase data for analytics.
     * @allow (create) - Only admins can create purchase data.
     * @allow (update, delete) - Only admins can modify or delete purchase data.
     * @deny (create, get, update, delete, list) - Non-admins cannot access purchase analytics data.
     * @principle Admin-only access for aggregated purchase data.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin() ;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for /roles_admin/{userId} documents.
     * @path /roles_admin/{userId}
     * @allow (create) - Only a DB admin can create an admin role.
     * @allow (get) - Anyone can check if a user is an admin.
     * @allow (delete) - Only a DB admin can remove an admin role.
     * @deny (list, update) - listing and updating are forbidden.
     * @principle DBAC - Existence over Content.
     */
    match /roles_admin/{userId} {
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();  // Ideally, this should be further restricted to a DB admin.
        allow update: if false;
        allow delete: if isAdmin(); // Ideally, this should be further restricted to a DB admin.
    }

    /**
     * @description Rules for /analytics/sales document.
     * @path /analytics/sales
     * @allow (get) - Only admins can read analytics data.
     * @allow (create, update, delete) - Only admins can modify analytics data.
     * @deny (get, create, update, delete) - Non-admins cannot access analytics data.
     * @principle Admin-only access for sensitive analytics.
     */
    match /analytics/sales {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Rules for /settings/main document.
     * @path /settings/main
     * @allow (get) - Anyone can read the site settings.
     * @allow (create, update, delete) - Only admins can modify site settings.
     * @deny (create, update, delete) - Non-admins cannot access site settings.
     * @principle Public read access for site settings, admin-only writes.
     */
    match /settings/main {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}