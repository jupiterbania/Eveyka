/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and purchases, with public read access to images.
 * Administrative privileges are granted based on the existence of a document in the `/roles_admin` collection.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, accessible only to the user and admins.
 * - `/images/{imageId}`: Stores image metadata, publicly readable.
 * - `/users/{userId}/purchases/{purchaseId}`: Stores user-specific purchase history, accessible only to the user and admins.
 * - `/images/{imageId}/purchases/{purchaseId}`: Stores anonymous purchase data, accessible only to admins.
 * - `/roles_admin/{userId}`: Presence of document grants admin privileges.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Image metadata is publicly readable but write-protected.
 * - Users can only read and write their own purchase history.
 * - Only admins can manage anonymous purchase data and grant admin roles.
 *
 * Denormalization for Authorization:
 *  - Admin status is determined by the existence of a document in `/roles_admin/{userId}`, avoiding the need to store an `isAdmin` field in the user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Function to check if the requesting user is the owner of the document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Function to check if the requesting user is an admin.
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (read, write) User with matching {userId} can access their own profile.
     *          (read) Admin can read any user profile.
     * @deny (read, write) Any other user cannot access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Allow a user to read their own profile or an admin to read any profile.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      // Allow a user to list their own profile or an admin to read any profile.
      allow list: if isAdmin();

      // Allow a user to create their own profile if the userId matches their auth.uid.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Allow a user to update their profile if they are the owner.
      allow update: if isSignedIn() && isOwner(userId);

      // Allow a user to delete their profile if they are the owner and the document exists.
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for images. Images are publicly readable, but only the app can modify them.
     * @path /images/{imageId}
     * @allow (read) Any user can read image data.
     * @deny (write) Only the backend can write images.
     * @principle Images are publicly readable. Write access is restricted.
     */
    match /images/{imageId} {
      // Allow anyone to read image data.
      allow get, list: if true;

      // Only allow create, update, and delete if the user is an admin.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (read, write) User with matching {userId} can access their own purchase history.
     *          (read) Admin can read any user's purchase history.
     * @deny (read, write) Any other user cannot access this purchase history.
     * @principle Enforces document ownership for purchase history.
     */
    match /users/{userId}/purchases/{purchaseId} {
      // Allow a user to read their own purchase history or an admin to read any user's purchase history.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      // Allow a user to list their own purchase history or an admin to read any user's purchase history.
      allow list: if isAdmin();
      // Allow a user to create their own purchase if the userId matches their auth.uid.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow a user to update their purchase if they are the owner and the document exists.
      allow update: if isSignedIn() && isOwner(userId);
      // Allow a user to delete their purchase if they are the owner and the document exists.
      allow delete: if isSignedIn() && isOwner(userId);
    }

     /**
      * @description Rules for image-specific purchase history.
      * @path /images/{imageId}/purchases/{purchaseId}
      * @allow (read, write) Admin only.
      * @deny (read, write) Any user cannot access the purchase history.
      * @principle Enforces admin only access.
      */
    match /images/{imageId}/purchases/{purchaseId} {
      // Only allow create, update, and delete if the user is an admin.
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (write) Only admins can create or delete admin roles.
     * @deny (read) No one can read the roles directly
     * @principle Enforces admin-only access to role management.
     */
    match /roles_admin/{userId} {
        allow get, list: if false;
        allow create, update, delete: if isAdmin();
    }
  }
}