/**
 * @file Firebase Security Rules for FocusFinds application.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and purchases,
 *                 while allowing public read access to images. Administrative privileges are granted based
 *                 on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * @dataStructure - /users/{userId}: Stores user profile information, accessible only to the user and admins.
 *                - /images/{imageId}: Stores image metadata, publicly readable.
 *                - /users/{userId}/purchases/{purchaseId}: Stores purchase history for each user, accessible only to the user and admins.
 *                - /images/{imageId}/purchases/{purchaseId}: Stores purchase data for an image, accessible only to admins.
 *                - /roles_admin/{userId}: Indicates admin privileges for a user; document existence grants admin rights.
 *                - /analytics/sales: Stores aggregated sales data, accessible only to admins.
 *                - /settings/main: A singleton document for global site settings, publicly readable, but only editable by admins.
 *
 * @keySecurityDecisions - Users can only access their own profile data and purchase history.
 *                         - Images are publicly readable but cannot be created, updated, or deleted via the client.
 *                         - Only users with a document in `/roles_admin/{userId}` can access analytics data, or edit site settings.
 *                         - User listing is disallowed to prevent unauthorized data scraping.
 *
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId}.
     * @allow (create) User with matching {userId}.
     * @deny (get, list) Any other user.
     * @principle Enforces document ownership and self-creation for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Prevent user enumeration

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.id == userId;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource != null; // Check for existence before delete
    }

    /**
     * @description Grants public read access to images.
     * @path /images/{imageId}
     * @allow (get, list) Any user.
     * @deny (create, update, delete) All users.
     * @principle Allows public read access to images but restricts writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Images are managed server-side.
    }

    /**
     * @description Grants access to user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (get, list, create) User with matching {userId}.
     * @deny (get, list, create) Any other user.
     * @principle Enforces document ownership for purchases within a user's profile.
     */
    match /users/{userId}/purchases/{purchaseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants admin-only access to image-specific purchase data.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) Only admins.
     * @deny (get, list, create, update, delete) All non-admins.
     * @principle Restricts access to purchase data to administrative users.
     */
    match /images/{imageId}/purchases/{purchaseId} {
       function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if isAdmin();
      allow create: if isAdmin() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to admin roles.
     * @path /roles_admin/{userId}
     * @allow create: Self-assignment of admin role is denied.
     * @allow get: Authorized for admins only.
     * @allow update, delete: Authorized for admins only.
     * @deny list: Prevent listing of admin roles.
     * @principle Restricts admin role management to authorized personnel.
     */
    match /roles_admin/{userId} {
       function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false; //No client side creation
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin-only access to aggregated analytics data.
     * @path /analytics/sales
     * @allow (get, list, create, update, delete) Only admins.
     * @deny (get, list, create, update, delete) All non-admins.
     * @principle Restricts access to sensitive analytics data to administrative users.
     */
    match /analytics/sales {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Grants public read access to site settings, but restricts writes to admins only.
      * @path /settings/main
      * @allow (get, list) Any user.
      * @allow (create, update, delete) Only admins.
      * @deny (create, update, delete) All non-admins.
      * @principle Restricts modification of site settings to administrative users.
      */
    match /settings/main {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}