/**
 * @file Firebase Security Rules for FocusFinds Application
 * @description This ruleset enforces a role-based access control model with user ownership for personal data and public read access to image metadata.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user and admins.
 * - /images/{imageId}: Public image metadata.
 * - /users/{userId}/purchases/{purchaseId}: Purchase history for each user, accessible only to the user.
 * - /images/{imageId}/purchases/{purchaseId}: Anonymous purchase data for images, accessible only to admins.
 * - /roles_admin/{userId}: Admin roles. The existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Image metadata is publicly readable.
 * - Purchase history is private to the user.
 * - Admin privileges are granted by the existence of a document in the /roles_admin collection.
 * - Listing of any private data collections is only allowed by the owner.
 * - To simplify rules and improve performance, the `isAdmin()` check relies on the existence of a document in `/roles_admin/{userId}` rather than storing the admin status in the user document.
 *   This avoids having to read the user document to determine admin status, making the rules more efficient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource (i.e., the resource exists and the user is the owner).
     * @param {string} userId - The user ID to compare against the resource's owner ID.
     * @returns {boolean} True if the user is an existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of an admin role document.
     * @returns {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for writes, admins can read all.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for /images/{imageId} documents.
     * @path /images/{imageId}
     * @allow (get) Any user can read image metadata.
     * @allow (list) Any user can list image metadata.
     * @deny (create) Only admins can create image metadata entries.
     * @deny (update) Only admins can update image metadata entries.
     * @deny (delete) Only admins can delete image metadata entries.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for /users/{userId}/purchases/{purchaseId} documents.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User with ID 'user123' can create a purchase record for themselves.
     * @deny (create) User with ID 'user456' cannot create a purchase record for 'user123'.
     * @allow (get) User with ID 'user123' can read their own purchase record.
     * @deny (get) User with ID 'user456' cannot read the purchase record of 'user123'.
     * @allow (update) User with ID 'user123' can update their own purchase record.
     * @deny (update) User with ID 'user456' cannot update the purchase record of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their own purchase record.
     * @deny (delete) User with ID 'user456' cannot delete the purchase record of 'user123'.
     * @principle Enforces document ownership for writes, admins can read all.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Rules for /images/{imageId}/purchases/{purchaseId} documents.
     * @path /images/{imageId}/purchases/{purchaseId}
     * @allow (get) Only admins can get image purchase records.
     * @allow (list) Only admins can list image purchase records.
     * @deny (create) Only admins can create image purchase records.
     * @deny (update) Only admins can update image purchase records.
     * @deny (delete) Only admins can delete image purchase records.
     * @principle Restricts access to admins.
     */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for /roles_admin/{userId} documents.
     * @path /roles_admin/{userId}
     * @allow (create) Only admins can grant admin roles to other users.  (This check relies on an existing admin document)
     * @deny (create) Non-admins cannot grant admin roles.
     * @allow (get)  Any Authenticated user can check the existence of admin
     * @deny (get) Unauthenticated users cannot read admin.
     * @allow (update) Only admins can modify admin roles.
     * @deny (update) Non-admins cannot modify admin roles.
     * @allow (delete) Only admins can revoke admin roles.
     * @deny (delete) Non-admins cannot revoke admin roles.
     * @principle DBAC - Existence over Content; Only admins can manage admin roles.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn(); // Any authenticated user can check for the existence of an admin role
        allow list: if false; // Listing of admin roles is not permitted.
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}