/**
 * @fileoverview Firestore Security Rules for FocusFinds application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public read access for content
 * with strict ownership and role-based access control for user data and administrative functions.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user and admins.
 * - /images/{imageId}: Publicly readable image metadata, writable only by admins.
 * - /users/{userId}/purchases/{purchaseId}: User-specific purchase history, accessible only to the user.
 * - /images/{imageId}/purchases/{purchaseId}: Purchase data tied to images, accessible only to admins for analytics.
 * - /roles_admin/{userId}:  A document's mere existance grants a user admin status.
 * - /analytics/sales: Aggregated sales and revenue data, writable only by admins.
 * - /settings/main: Global site settings, writable only by admins.
 *
 * Key Security Decisions:
 * - Public read access for image metadata enables discovery and browsing.
 * - User listing is disallowed to protect user privacy.
 * - Admin privileges are granted based on the existence of a document in the `/roles_admin` collection.
 * - Data validation is relaxed for rapid prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `isAdmin()` function checks for the existence of a document in `/roles_admin/{userId}` to grant admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource (isSignedIn, isOwner, and resource exists).
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

     /**
      * @description Checks if the user has admin privileges based on the existance of a document in `/roles_admin/{userId}`.
      * @return {boolean} True if the user is an admin, false otherwise.
      */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, update, delete) Signed-in user can access and modify their own profile, admins can access any profile.
     * @deny (create) Unauthenticated users cannot create profiles.
     * @deny (update, delete) Non-owners and non-admins cannot modify profiles.
     * @principle Enforces document ownership for writes, allows admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for image metadata.
     * @path /images/{imageId}
     * @allow (get, list) Public read access for image discovery.
     * @allow (create, update, delete) Only admins can manage image metadata.
     * @deny (create, update, delete) Non-admins cannot modify image metadata.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user-specific purchase history.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) Signed-in user can create their own purchase records.
     * @allow (get, list) Signed-in user can access their own purchase history.
     * @allow (update, delete) Signed-in user can update and delete their own purchase records.
     * @deny (create, get, list, update, delete) Non-owners cannot access purchase history.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Rules for anonymous purchase data tied to images (for admin analytics).
       * @path /images/{imageId}/purchases/{purchaseId}
       * @allow (create, get, list, update, delete) Only admins can manage purchase data for analytics.
       * @deny (create, get, list, update, delete) Non-admins cannot access purchase data.
       * @principle Restricts access to admin roles.
       */
    match /images/{imageId}/purchases/{purchaseId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rules for granting admin privileges.
      * @path /roles_admin/{userId}
      * @allow (create) Only signed-in users can be granted admin privileges.
      * @allow (get) Only admins can check if the user is an admin.
      * @allow (update, delete) Only admins can manage admin roles.
      * @deny (create, get, update, delete) Non-admins cannot access admin roles.
      * @principle Enforces admin-only access for managing roles.
      */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rules for aggregated sales and revenue data.
      * @path /analytics/sales
      * @allow (get) Public read access for analytics data.
      * @allow (create, update, delete) Only admins can modify analytics data.
      * @deny (create, update, delete) Non-admins cannot modify analytics data.
      * @principle Allows public reads, restricts writes to admins.
      */
    match /analytics/sales {
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for global site settings.
     * @path /settings/main
     * @allow (get) Public read access for site settings.
     * @allow (create, update, delete) Only admins can modify site settings.
     * @deny (create, update, delete) Non-admins cannot modify site settings.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /settings/main {
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}